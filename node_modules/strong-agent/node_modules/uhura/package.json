{
  "name": "uhura",
  "version": "0.0.9",
  "description": "server-to-server event emitter wire protocol",
  "main": "index.js",
  "repository": "",
  "author": {
    "name": "Stephen Belanger",
    "email": "admin@stephenbelanger.com"
  },
  "license": "MIT",
  "dependencies": {
    "JSONStream": "0.6.x",
    "connect": "2.8.x",
    "uid2": "0.0.x"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha -r should -G -R spec",
    "coverage": "rm -rf lib-cov && jscoverage lib lib-cov && UHURA_COV=1 mocha -r should -G -R html-cov > lib-cov/index.html && open lib-cov/index.html"
  },
  "readme": "# Uhura\n[![Build Status](https://travis-ci.org/NodeFly/uhura.png)](https://travis-ci.org/NodeFly/uhura)\n\nUhura is a server-to-server event emitter wire protocol. It provides a shared event emitter and data store between a server and client, with automatic reconnection and exponential backoff logic.\n\n## Install\n\n    npm install uhura\n\n## Usage\n    \n    var server = Uhura.createServer(function (client) {\n      client.on('ping', function () {\n        client.send('pong')\n      })\n    })\n    server.listen(5555)\n\n    var client = Uhura.createClient(5555)\n    client.on('pong', function () {\n      console.log('pong received')\n    })\n    client.send('ping')\n\n## API\n\n### Uhura.createServer(port, cb)\nCreates a net server that uses an event emitter to communicate. Callback receives a unique emitter for the net socket.\n\n### Uhura.createClient(port [, host] [, cb]) returns client emitter\nCreate a client emitter. The port argument may be a number, a string, or an existing net.connect() instance. It also attaches a few extra methods, as seen below.\n\n### client.reconnect()\nForcefully destroys the socket and reconnects.\n\n### client.autoReconnect()\nFlag the client to automatically reconnect, which an exponential backoff mechanism.\n\n### client.disconnect()\nDisable auto-reconnection, if enabled, and closes the socket.\n\n### client.send(event [, args...])\nThis is identical to the interface for the emit() function seen on normal event emitters, except it sends to the remote server.\n\n### client.set(key, val)\nSets a value in the shared data store. This is also used to store session id for reconnection.\n\n### client.get(key)\nGets a value from the shared data store.\n\n---\n\n### Copyright (c) 2013 NodeFly\n#### Licensed under MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "uhura@0.0.9",
  "dist": {
    "shasum": "aca4650c8639e30f611f75545ebab52ffede19ac"
  },
  "_from": "uhura@stable",
  "_resolved": "https://registry.npmjs.org/uhura/-/uhura-0.0.9.tgz"
}
