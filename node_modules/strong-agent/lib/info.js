var os = require('os');
var platform = os.platform();
var gcinfo;
try { 
	gcinfo = require('nodefly-gcinfo');
} catch(e) { 
	console.log('Could not load optional dependency nodefly-gcinfo');
}
var config = global.nodeflyConfig;

var osScope = os.hostname();
var processScope = osScope + ' - Process[' + process.pid + ']';

var nf;
var lastCpuTime;
var last_cpu_util;
var gcstats = [];

exports.init = function() {
	nf = global.nodefly;

	if (!gcinfo) return;

	gcinfo.onGC(function(stats){
		
		gcstats.push(stats);
		
		var len   = gcstats.length;
		var total = 0;
		
		gcstats.forEach(function(stat){
			total += stat;
		})
		
		var baseline = total / len / 1000000;
		
		nf.metric(processScope, 'GC Full. V8 heap used', baseline, 'MB');
		collectHeap(baseline);
		
		if (len>10) {
			gcstats = gcstats.splice(1,len);
		}
		
	});
	
	setInterval(function() {
		try {
			collect();
			connectionInfo();
			collectHeap();
		}
		catch(e) { nf.error(e); }
	}, config.collectInterval);

	osScope = os.hostname();
	processScope = osScope + ' - Process[' + process.pid + ']';

	collect();
};

function collectHeap(gcFull) {
	try {
		var mem = process.memoryUsage();
		var rss = mem.rss / 1000000;
		var heapUsed = mem.heapUsed / 1000000;
		var heapData = [ heapUsed, rss, gcFull];
		
		nf.metric(processScope, 'Heap Data', heapData, 'MB');
	}
	catch(err) {
		nf.error(err);
	}
}

function connectionInfo(){
	if (nf.server_obj) {
		var tp = nf.server_obj.connCount / (config.collectInterval / 1000);
		nf.server_obj.connCount = 0;
		nf.metric(processScope, 'Connections', [nf.server_obj.connections,tp], '');
	}
}


var collect = function() {
	require('./cpuinfo').cpuutil(function(percent_proc,percent_user,percent_syst){
		nf.metric(processScope, 'CPU util',       percent_proc, '%');
		nf.metric(processScope, 'CPU util stime', percent_syst, '%');
		nf.metric(processScope, 'CPU util utime', percent_user, '%');
	});
};
