// Generated by CoffeeScript 1.4.0
(function() {
  var Driver, NDriver, helper, _;

  NDriver = require('mongodb');

  Driver = require('./driver');

  helper = require('./helper');

  _ = require('underscore');

  Driver.Connection = (function() {

    function Connection(options) {
      this.options = options;
      this.nServer = new NDriver.Server(this.options.host, this.options.port, this.options.options);
    }

    Connection.prototype.db = function(name, options) {
      if (options == null) {
        options = {};
      }
      return new Driver.Db(name, this, options);
    };

    Connection.prototype.getNativeDb = function(name, options, callback, next) {
      var tmp, _ref,
        _this = this;
      if (!callback) {
        throw new Error("callback required!");
      }
      if ((_ref = this.dbsCache) == null) {
        this.dbsCache = {};
      }
      if (!this.dbsCache[name]) {
        tmp = new NDriver.Db(name, this.nServer, options);
        return tmp.open(function(err, nDb) {
          if (err) {
            return callback(err);
          }
          if (_this.options.username) {
            return nDb.authenticate(_this.options.username, _this.options.password, function(err, result) {
              if (err) {
                return callback(err);
              }
              if (!result) {
                return callback(new Error("invalid username or password!"));
              }
              _this.dbsCache[name] = nDb;
              return next(nDb);
            });
          } else {
            _this.dbsCache[name] = nDb;
            return next(nDb);
          }
        });
      } else {
        return next(this.dbsCache[name]);
      }
    };

    Connection.prototype.getNativeCollection = function(dbName, dbOptions, cName, cOptions, callback, next) {
      var key, _ref,
        _this = this;
      if (!callback) {
        throw new Error("callback required!");
      }
      key = "" + dbName + "." + cName;
      if ((_ref = this.collectionsCache) == null) {
        this.collectionsCache = {};
      }
      if (!this.collectionsCache[key]) {
        return this.getNativeDb(dbName, dbOptions, callback, function(nDb) {
          return nDb.collection(cName, cOptions, function(err, nCollection) {
            if (err) {
              return callback(err);
            }
            _this.collectionsCache[key] = nCollection;
            return next(nCollection);
          });
        });
      } else {
        return next(this.collectionsCache[key]);
      }
    };

    return Connection;

  })();

}).call(this);
