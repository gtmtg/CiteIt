// Generated by CoffeeScript 1.4.0
(function() {
  var Driver, NDriver, dummy, name, nativeProto, proto, v, _,
    __slice = [].slice;

  _ = require('underscore');

  NDriver = require('mongodb');

  Driver = require('./driver');

  Driver.Db = (function() {

    function Db(name, connection, options) {
      this.name = name;
      this.connection = connection;
      this.options = options != null ? options : {};
    }

    Db.prototype.collection = function(name, options) {
      if (options == null) {
        options = {};
      }
      return new Driver.Collection(name, options, this);
    };

    Db.prototype.close = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.getNative(callback, function(nDb) {
        nDb.close();
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Db.prototype.collectionNames = function() {
      var callback, options, that, _i;
      options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      options = options[0] || {};
      that = this;
      if (typeof this.log === "function") {
        this.log({
          info: "collectionNames"
        });
      }
      return this.getNative(callback, function(nDb) {
        return nDb.collectionNames(function(err, names) {
          names = _(names).map(function(obj) {
            if (!err) {
              return obj.name.replace("" + that.name + ".", '');
            }
          });
          return callback(err, names);
        });
      });
    };

    Db.prototype.clear = function() {
      var callback, options, _i,
        _this = this;
      options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      if (!callback) {
        throw new Error("callback required!");
      }
      options = options[0] || {};
      if (typeof this.log === "function") {
        this.log({
          info: "clear"
        });
      }
      return this.collectionNames(options, function(err, names) {
        var counter, drop;
        if (err) {
          return callback(err);
        }
        names = _(names).select(function(name) {
          return !/^system\./.test(name);
        });
        counter = 0;
        drop = function() {
          var name;
          if (counter === names.length) {
            return callback(null);
          } else {
            name = names[counter];
            counter += 1;
            return _this.getNative(callback, function(nDb) {
              var _this = this;
              return nDb.collection(name, options, function(err, nCollection) {
                if (err) {
                  return callback(err);
                }
                return nCollection.drop(function(err) {
                  if (err) {
                    return callback(err);
                  }
                  return drop();
                });
              });
            });
          }
        };
        return drop();
      });
    };

    Db.prototype.getNative = function(callback, next) {
      return this.connection.getNativeDb(this.name, this.options, callback, next);
    };

    Db.prototype.log = function(msgs) {
      var msg, type, _results;
      _results = [];
      for (type in msgs) {
        msg = msgs[type];
        _results.push(console[type]("     mongo: " + (this.alias || this.name) + "." + msg));
      }
      return _results;
    };

    Db.prototype.objectId = function(id) {
      if (id) {
        return NDriver.ObjectID(id);
      } else {
        return NDriver.ObjectID.createPk();
      }
    };

    return Db;

  })();

  dummy = function() {};

  proto = Driver.Db.prototype;

  nativeProto = NDriver.Db.prototype;

  for (name in nativeProto) {
    v = nativeProto[name];
    if (!proto[name] && _.isFunction(v)) {
      (function(name) {
        return proto[name] = function() {
          var args, callback, _base;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (typeof (_base = this.db).log === "function") {
            _base.log({
              info: "" + name + " " + (helper.inspect(args))
            });
          }
          callback = _.isFunction(args[args.length - 1]) ? args[args.length - 1] : dummy;
          return this.getNative(callback, function(nCursor) {
            return nCursor[name].apply(nCursor, args);
          });
        };
      })(name);
    }
  }

}).call(this);
