// Generated by CoffeeScript 1.4.0
(function() {
  var Driver, _;

  _ = require('underscore');

  Driver = require('./driver');

  module.exports = Driver.helper = {
    safeParseInt: function(v) {
      if (_.isNumber(v)) {
        v = v.toString();
      }
      if (!_.isString(v)) {
        return null;
      }
      if (v.length > 100) {
        return null;
      }
      if (!(v.length > 0)) {
        return null;
      }
      return parseInt(v);
    },
    getId: function(doc) {
      if (Driver.extendedOptions.convertId) {
        return doc.id;
      } else {
        return doc._id;
      }
    },
    setId: function(doc, id) {
      if (Driver.extendedOptions.convertId) {
        return doc.id = id;
      } else {
        return doc._id = id;
      }
    },
    convertSelectorId: function(selector) {
      if (Driver.extendedOptions.convertId) {
        selector = _(selector).clone();
        if ('id' in selector) {
          selector._id = selector.id;
          delete selector.id;
        }
        return selector;
      } else {
        return selector;
      }
    },
    convertDocIdToMongo: function(hash) {
      if (Driver.extendedOptions.convertId && ('id' in hash)) {
        hash._id = hash.id;
        delete hash.id;
      }
      return hash;
    },
    convertDocIdToDriver: function(hash) {
      if (Driver.extendedOptions.convertId && ('_id' in hash)) {
        hash.id = hash._id;
        delete hash._id;
      }
      return hash;
    },
    idSize: 6,
    idSymbols: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    generateId: function() {
      var count, id, rand, _ref;
      _ref = ["", this.idSize + 1], id = _ref[0], count = _ref[1];
      while (count -= 1) {
        rand = Math.floor(Math.random() * this.idSymbols.length);
        id += this.idSymbols[rand];
      }
      return id;
    },
    parseMongoUrl: function(arg) {
      var match, opts, _ref, _ref1, _ref2, _ref3;
      if (arg == null) {
        arg = {};
      }
      if (_.isObject(arg)) {
        if ((_ref = arg.host) == null) {
          arg.host = '127.0.0.1';
        }
        if ((_ref1 = arg.port) == null) {
          arg.port = 27017;
        }
        if ((_ref2 = arg.db) == null) {
          arg.db = 'default';
        }
        opts = arg;
      } else {
        match = arg.match(/(?:mongodb:\/\/)?(?:(.+):(.+)@)?(?:([^:]+)(?::(\d+))?\/)?(.+)/);
        opts = {
          username: match[1],
          password: match[2],
          host: match[3] || '127.0.0.1',
          port: parseInt(match[4] || 27017, 10),
          db: match[5] || 'default'
        };
      }
      if ((_ref3 = opts.options) == null) {
        opts.options = {
          auto_reconnect: true
        };
      }
      return opts;
    },
    inspect: function(obj) {
      return JSON.stringify(obj);
    }
  };

}).call(this);
