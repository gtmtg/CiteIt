// Generated by CoffeeScript 1.4.0
(function() {
  var Driver, NDriver, dummy, helper, methods, name, nativeProto, proto, v, _, _fn, _i, _len,
    __slice = [].slice;

  _ = require('underscore');

  helper = require('./helper');

  NDriver = require('mongodb');

  Driver = require('./driver');

  Driver.Collection = (function() {

    function Collection(name, options, db) {
      this.name = name;
      this.options = options;
      this.db = db;
    }

    Collection.prototype.create = function() {
      var callback, doc, options, _base, _i,
        _this = this;
      doc = arguments[0], options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      options = options[0] || {};
      options = _.extend({
        safe: Driver.options.safe
      }, options);
      if (!helper.getId(doc) && Driver.extendedOptions.generateId) {
        helper.setId(doc, helper.generateId());
      }
      if (typeof (_base = this.db).log === "function") {
        _base.log({
          info: "" + this.name + ".create " + (helper.inspect(doc)) + ", " + (helper.inspect(options))
        });
      }
      return this.getNative(callback, function(nCollection) {
        doc = helper.convertDocIdToMongo(doc);
        return nCollection.insert(doc, options, function(err, result) {
          doc = helper.convertDocIdToDriver(doc);
          if (err && Driver.extendedOptions.generateId) {
            helper.setId(doc, void 0);
          }
          if (!err) {
            result = result[0];
          }
          return callback(err, result);
        });
      });
    };

    Collection.prototype.update = function() {
      var callback, doc, ds, options, os, selector, ss, _i, _ref,
        _this = this;
      selector = arguments[0], doc = arguments[1], options = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), callback = arguments[_i++];
      options = options[0] || {};
      if (!doc) {
        throw new Error("document for update not provided!");
      }
      options = _(_(doc).keys()).any(function(k) {
        return /^\$/.test(k);
      }) ? _.extend({
        safe: Driver.options.safe,
        multi: Driver.options.multi
      }, options) : _.extend({
        safe: Driver.options.safe
      }, options);
      if (this.db.log != null) {
        _ref = [helper.inspect(selector), helper.inspect(doc), helper.inspect(options)], ss = _ref[0], ds = _ref[1], os = _ref[2];
        this.db.log({
          info: "" + this.name + ".update " + ss + ", " + ds + ", " + os
        });
      }
      return this.getNative(callback, function(nCollection) {
        selector = helper.convertSelectorId(selector);
        doc = helper.convertDocIdToMongo(doc);
        return nCollection.update(selector, doc, options, function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          doc = helper.convertDocIdToDriver(doc);
          return callback.apply(null, args);
        });
      });
    };

    Collection.prototype["delete"] = function() {
      var callback, options, selector, _base, _i,
        _this = this;
      selector = arguments[0], options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      if (selector == null) {
        selector = {};
      }
      options = options[0] || {};
      options = _.extend({
        safe: Driver.options.safe
      }, options);
      if (typeof (_base = this.db).log === "function") {
        _base.log({
          info: "" + this.name + ".delete " + (helper.inspect(selector)) + ", " + (helper.inspect(options))
        });
      }
      return this.getNative(callback, function(nCollection) {
        selector = helper.convertSelectorId(selector);
        return nCollection.remove(selector, options, callback);
      });
    };

    Collection.prototype.save = function() {
      var callback, doc, id, options, selector, _i;
      doc = arguments[0], options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      if (id = helper.getId(doc)) {
        selector = {};
        helper.setId(selector, id);
        return this.update.apply(this, [selector, doc].concat(__slice.call(options), [function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, doc);
        }]));
      } else {
        return this.create.apply(this, [doc].concat(__slice.call(options), [callback]));
      }
    };

    Collection.prototype.cursor = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Driver.Cursor, [this].concat(__slice.call(args)), function(){});
    };

    Collection.prototype.find = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.cursor.apply(this, args);
    };

    Collection.prototype.insert = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.create.apply(this, args);
    };

    Collection.prototype.remove = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this["delete"].apply(this, args);
    };

    Collection.prototype.getNative = function(callback, next) {
      return this.db.connection.getNativeCollection(this.db.name, this.db.options, this.name, this.options, callback, next);
    };

    return Collection;

  })();

  methods = ['first', 'all', 'next', 'close', 'count', 'each', 'limit', 'skip', 'sort', 'paginate', 'snapshot', 'fields', 'tailable', 'batchSize', 'fields', 'hint', 'explain', 'timeout'];

  proto = Driver.Collection.prototype;

  _fn = function(name) {
    return proto[name] = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.cursor())[name].apply(_ref, args);
    };
  };
  for (_i = 0, _len = methods.length; _i < _len; _i++) {
    name = methods[_i];
    _fn(name);
  }

  dummy = function() {};

  nativeProto = NDriver.Collection.prototype;

  for (name in nativeProto) {
    v = nativeProto[name];
    if (!proto[name] && _.isFunction(v)) {
      (function(name) {
        return proto[name] = function() {
          var args, callback, _base;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (typeof (_base = this.db).log === "function") {
            _base.log({
              info: "" + this.name + "." + name + " " + (helper.inspect(args))
            });
          }
          callback = _.isFunction(args[args.length - 1]) ? args[args.length - 1] : dummy;
          return this.getNative(callback, function(nCollection) {
            return nCollection[name].apply(nCollection, args);
          });
        };
      })(name);
    }
  }

}).call(this);
